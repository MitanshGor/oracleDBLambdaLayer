service: oracledblayer

frameworkVersion: "3"

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    packager: 'yarn'
    # includeModules: 
      # forceExclude:
        # - oracledb #force exclude the oracledb as we have already include it in our layer

  # esbuild:
  #   bundle: true
  #   minify: true
  #   sourcemap: true
  #   packager: yarn
  #   concurrency: 25
    # packagerOptions:
    #   scripts:
    #     - export ORACLE_HOME=/home/user/app/user/product/12.1.0/dbhome_1
    #     - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/lib
        # - rm -rf node_modules
        # - yarn
        # - yarn postinstall
        # - sudo sh -c "echo /usr/lib/oracle/18.3/client64/lib > /etc/ld.so.conf.d/oracle-instantclient.conf"
        # - export LD_LIBRARY_PATH=/usr/lib/oracle/18.3/client64/lib
    # exclude: ['oracledb']
    watch:
      ignore: ['.serverless', '.webpack', '.husky', 'node_modules']


provider:
  name: aws
  runtime: nodejs16.x
package:
  individually: true
  patterns:
    - "!serverless.yml"
    - "!package-lock.json"
    - "!.gitlab-ci.yml"
    - "!README.md"
plugins:
  # - serverless-prune-plugin
  # - serverless-esbuild
  - serverless-webpack
  - serverless-offline
  # - serverless-cf-vars
  # - serverless-plugin-resource-tagging
  # - serverless-step-functions
  # - "@distinction-dev/serverless-ephemeral-storage"
  # S3 local - START
  # - serverless-s3-local
  # S3 local - END

# layers:
#   oraclelib:
#     path: oraclelib

functions:
  hello:
    handler: handler.hello
    layers:
      # - { Ref: OraclelibLambdaLayer }
      - arn:aws:lambda:us-east-1:102413378525:layer:oracleDBLayer:6
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - httpApi:
          path: /users
          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
